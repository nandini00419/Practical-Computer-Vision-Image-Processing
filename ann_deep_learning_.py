# -*- coding: utf-8 -*-
"""ANN deep learning .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VHQbTIXIeD1DQjEJ9NP5xKFHRFYd4VM6
"""

import numpy as np
import cv2
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping

print("Loading MNIST dataset...")
(x_train, y_train), (x_test, y_test) = mnist.load_data()
print(f"Training samples: {x_train.shape[0]}, Test samples: {x_test.shape[0]}")

def preprocess_image(img):
    blurred = cv2.GaussianBlur(img, (3, 3), 0)
    normalized = blurred / 255.0
    return normalized

print("Preprocessing training images...")
x_train_proc = np.array([preprocess_image(img) for img in x_train])
print("Preprocessing test images...")
x_test_proc = np.array([preprocess_image(img) for img in x_test])

x_train_flat = x_train_proc.reshape(-1, 28 * 28)
x_test_flat = x_test_proc.reshape(-1, 28 * 28)
print(f"Flattened shape: {x_train_flat.shape}")

print("One-hot encoding labels...")
y_train_cat = to_categorical(y_train, 10)
y_test_cat = to_categorical(y_test, 10)

print("Building ANN model...")
model = Sequential([
    Dense(128, activation='relu', input_shape=(784,)),
    Dropout(0.3),
    Dense(64, activation='relu'),
    Dropout(0.3),
    Dense(10, activation='softmax')
])

print("Compiling model with Adam optimizer...")
model.compile(optimizer=Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])
early_stop = EarlyStopping(patience=3, restore_best_weights=True)

print("Starting training...")
history = model.fit(x_train_flat, y_train_cat, epochs=20, batch_size=64, validation_split=0.1, callbacks=[early_stop])
print("Training complete")
print("Evaluating on test data...")
test_loss, test_acc = model.evaluate(x_test_flat, y_test_cat)
print(f"Test Accuracy: {test_acc:.4f}, Test Loss: {test_loss:.4f}")